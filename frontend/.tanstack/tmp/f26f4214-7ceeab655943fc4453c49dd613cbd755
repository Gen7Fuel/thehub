import { createFileRoute } from '@tanstack/react-router'
import { useState } from "react";
import axios from "axios";
import { useNavigate } from "@tanstack/react-router";

export const Route = createFileRoute(
  '/_navbarLayout/audit/templates/follow-up/',
)({
  component: RouteComponent,
})

function RouteComponent() {
  const [name, setName] = useState("");
  const [description, setDescription] = useState("");
  const [items, setItems] = useState([{ text: "" }]);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const handleItemChange = (idx: number, value: string) => {
    setItems(items =>
      items.map((s, i) => (i === idx ? { text: value } : s))
    );
  };

  const addItem = () => setItems([...items, { text: "" }]);
  const removeItem = (idx: number) =>
    setItems(items => items.filter((_, i) => i !== idx));

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    try {
      await axios.post("/api/audit/feedback-templates", {
        name,
        description,
        items: items.filter(s => s.text.trim() !== ""),
      }, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      navigate({ to: "/audit/templates/feedback/list" });
    } catch (err: any) {
      setError(err?.response?.data?.message || "Failed to create template");
    }
  };

  return (
    <div className="max-w-lg mx-auto mt-8 p-4 border rounded">
      <h2 className="text-xl font-bold mb-4">Create Feedback Template</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block font-medium">Template Name</label>
          <input
            className="border px-2 py-1 w-full"
            value={name}
            onChange={e => setName(e.target.value)}
            required
          />
        </div>
        <div>
          <label className="block font-medium">Description</label>
          <input
            className="border px-2 py-1 w-full"
            value={description}
            onChange={e => setDescription(e.target.value)}
          />
        </div>
        <div>
          <label className="block font-medium mb-1">Feedback Items</label>
          {items.map((item, idx) => (
            <div key={idx} className="flex items-center mb-2">
              <input
                className="border px-2 py-1 flex-1"
                value={item.text}
                onChange={e => handleItemChange(idx, e.target.value)}
                required
              />
              {items.length > 1 && (
                <button
                  type="button"
                  className="ml-2 text-red-500"
                  onClick={() => removeItem(idx)}
                >
                  Remove
                </button>
              )}
            </div>
          ))}
          <button
            type="button"
            className="mt-1 text-blue-600"
            onClick={addItem}
          >
            + Add Item
          </button>
        </div>
        {error && <div className="text-red-600">{error}</div>}
        <button
          type="submit"
          className="bg-gray-700 text-white px-4 py-2 rounded"
        >
          Create Template
        </button>
      </form>
    </div>
  );
}
