const mongoose = require('mongoose');

const ItemSchema = new mongoose.Schema({
  gtin: { type: String, required: true },
  vin: { type: String, default: '' },
  itemName: { type: String, default: '' },
  size: { type: String, default: '' },
  onHandQty: { type: Number, default: 0 },
  onHandQtyOld: { type: Number, default: 0 },
  forecast: { type: Number, default: 0 },
  minStock: { type: Number, default: 0 },
  itemsToOrder: { type: Number, default: 0 },
  unitInCase: { type: Number, default: 0 },
  casesToOrder: { type: Number, default: 0 },
  casesToOrderOld: { type: Number, default: 0 },
  completed: { type: Boolean, default: false }
});

const CategorySchema = new mongoose.Schema({
  number: { type: String, required: true },
  name: { type: String, required: true },
  items: [ItemSchema],
  completed: { type: Boolean, default: false }
});

const CommentSchema = new mongoose.Schema({
  text: { type: String, required: true },
  author: { type: String }, // email or user id
  timestamp: { type: Date, default: new Date() }
});

const StatusHistorySchema = new mongoose.Schema({
  status: { type: String, required: true },
  timestamp: { type: Date }
});



const OrderReconciliationSchema = new mongoose.Schema({
  filename: { type: String }, // Will be autogenerated
  categories: [CategorySchema],
  createdAt: { type: Date, default: Date.now },
  integerId: { type: Number, unique: true }, // Integer ID starting from 1
  site: { type: String, required: true },
  vendor: { type: String, required: true },
  completed: { type: Boolean, default: false },
  extraItemsNote: { type: String, default: '' },
  email: { type: String, default: 'mohammad@gen7fuel.com' },
  orderPlaced: { type: Boolean, default: false },
  delivered: { type: Boolean, default: false },
  currentStatus: { type: String, default: "Created" },
  statusHistory: {
    type: [StatusHistorySchema],
    default: [{ status: "Created", timestamp: new Date() }]
  },
  comments: {
    type: [CommentSchema],
    default: []
  }
});

// Auto-generate filename and integerId before saving
OrderReconciliationSchema.pre('save', async function (next) {
  if (!this.integerId) {
    const last = await mongoose.model('OrderReconciliation').findOne({}, {}, { sort: { integerId: -1 } });
    this.integerId = last ? last.integerId + 1 : 1;
  }
  if (!this.filename) {
    let vendorName = this.vendor;
    // If vendor is an ObjectId, try to populate and get the name
    if (mongoose.isValidObjectId(this.vendor)) {
      // Try to fetch the vendor document and get its name
      try {
        const Vendor = mongoose.model('Vendor');
        const vendorDoc = await Vendor.findById(this.vendor);
        if (vendorDoc && vendorDoc.name) {
          vendorName = vendorDoc.name;
        }
      } catch (e) {
        // fallback to ObjectId string if lookup fails
      }
    }
    const dateStr = formatDateWithSuffix(this.createdAt);
    this.filename = `OrderRec - ${vendorName} - ${dateStr} - ${this.integerId}`;
  }
  next();
});

function formatDateWithSuffix(date) {
  const day = date.getDate();
  const suffix =
    day % 10 === 1 && day !== 11 ? 'st' :
    day % 10 === 2 && day !== 12 ? 'nd' :
    day % 10 === 3 && day !== 13 ? 'rd' : 'th';
  const month = date.toLocaleString('default', { month: 'long' });
  const year = date.getFullYear();
  return `${day}${suffix} ${month} ${year}`;
}

module.exports = mongoose.model('OrderReconciliation', OrderReconciliationSchema);